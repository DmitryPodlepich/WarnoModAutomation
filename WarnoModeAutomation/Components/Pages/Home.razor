@page "/"
@using System.Text
@using System.Diagnostics
@using WarnoModeAutomation.Logic;
@using BlazorBootstrap;
@using Microsoft.JSInterop
@inject IJSRuntime JS

<section>

    <div>
        <Accordion AlwaysOpen="true">
            <AccordionItem Title="Status" IsActive="true">
                <Content>
                    <div class="d-flex flex-column">
                        <p class="h5">
                            <span class="badge badge-secondary">Mod name:</span>
                            <strong><small>@Storage.ModeSettings.ModName</small></strong>
                        </p>

                        <hr />

                        <p class="h5">
                            <span class="badge badge-secondary">Status:</span>
                            <strong><small>@Storage.Status.Status</small></strong>
                        </p>

                        <hr />

                    </div>
                </Content>
            </AccordionItem>
            <AccordionItem Title="Control" IsActive="true">
                <Content>
                    <div class="d-flex flex-row">
                        <Button Loading="@(_currentOperation == OperationType.Creation)" LoadingText="Creating..." Disabled="@(_currentOperation != OperationType.Idle)" Class="btn btn-primary" @onclick="CreateMod">
                            <i class="bi bi-plus-circle-dotted"></i> 
                            Create 
                        </Button>

                        <hr>

                        <Button Loading="@(_currentOperation == OperationType.Generation)" LoadingText="Generating..." Disabled="@(_currentOperation != OperationType.Idle)" Class="btn btn-primary ms-2" @onclick="GenerateMod">
                            <i class="bi bi-box-seam"></i>
                            Generate
                        </Button>

                        <hr>

                        <Button Loading="@(_currentOperation == OperationType.Updation)" LoadingText="Updating..." Disabled="@(_currentOperation != OperationType.Idle)" Class="btn btn-primary ms-2" @onclick="UpdateMod">
                            <i class="bi bi-download"></i>
                            Update 
                        </Button>

                        <hr>

                        @*  <Button Loading="@(_currentOperation == OperationType.FillDatabase)" LoadingText="Filling..." Disabled="@(_currentOperation != OperationType.Idle)" Class="btn btn-primary ms-2" @onclick="FillDatabase">
                            <i class="bi bi-download"></i>
                            Fill database
                        </Button>

                        <hr> *@

                        <Button Loading="@(_currentOperation == OperationType.Modify)" LoadingText="Modifying..." Disabled="@(_currentOperation != OperationType.Idle)" Class="btn btn-primary ms-2" @onclick="Modify">
                            <i class="bi bi-download"></i>
                            Modify
                        </Button>

                        <hr>

                        <Button Loading="@(_currentOperation == OperationType.Deletion)" LoadingText="Deleting..." Disabled="@(_currentOperation != OperationType.Idle)" Class="btn btn-danger ms-2" @onclick="DeleteMod">
                            <i class="bi bi-trash-fill"></i>
                            Delete
                        </Button>

                    </div>
                </Content>
            </AccordionItem>
        </Accordion>
    </div>

    <div class="d-flex flex-column p-3">

        <div class="d-flex flex-row justify-content-between align-items-center mb-2">
            <p class="m-0"><strong>Mod manager log: </strong></p>
            <Button @onclick="ModManagerOutputClear" Class="btn btn-warning"><i class="bi bi-eraser-fill"></i> Clear</Button>
        </div>

       <InputTextArea @ref=TextAreaRef style="min-height: 35vh; font-size: 14px;"  @bind-Value="@ModManagerOutput"></InputTextArea>
    </div>

</section>

<script>
    function scrollHeight(textarea) {
        textarea.scrollTop = textarea.scrollHeight;
    }
</script>

@code {
    InputTextArea TextAreaRef;

    private enum OperationType
    {
        Idle,
        Creation,
        Deletion,
        Generation,
        Updation,
        Modify,
        FillDatabase
    }

    private OperationType _currentOperation = OperationType.Idle;

    private string ModManagerOutput { get => _stringBuilder.ToString(); set => _stringBuilder = new StringBuilder(value); }
    private StringBuilder _stringBuilder;

    protected override Task OnInitializedAsync()
    {
        _stringBuilder = new StringBuilder();

        ModManager.OnOutput += ModManagerOnOutput;

        return base.OnInitializedAsync();
    }

    public void ModManagerOutputClear()
    {
        _stringBuilder.Clear();
    }

    public void ModManagerOnOutput(string data)
    {
        App.Current.Dispatcher.Dispatch(async () =>
        {
            _stringBuilder.AppendLine(data);
            StateHasChanged();
            await JS.InvokeVoidAsync("scrollHeight", TextAreaRef.Element);
        });
    }

    public async Task CreateMod()
    {
        await Perform(OperationType.Creation, async () =>
        {
            await ModManager.CreateModAsync();
            Storage.Status.GetStatus();
        });
    }

    //ToDo: add alert!
    public async Task DeleteMod()
    {
        await Perform(OperationType.Deletion, async () =>
        {
            ModManager.DeleteMod();
            Storage.Status.GetStatus();
            await Task.CompletedTask;
        });
    }

    public async Task GenerateMod()
    {
        await Perform(OperationType.Generation, async () => 
        {
            await ModManager.GenerateModAsync();
            Storage.Status.GetStatus();
        });
    }

    public async Task UpdateMod()
    {
        await Perform(OperationType.Updation, async () =>
        {
            await ModManager.UpdateModAsync();
            Storage.Status.GetStatus();
        });
    }

    public async Task Modify()
    {
        await Perform(OperationType.Modify, async () => await ModManager.Modify());

    }

    public async Task FillDatabase()
    {
        await Perform(OperationType.FillDatabase, async () =>
        {
            var tokenSource = new CancellationTokenSource();

            await ModManager.FillDatabaseAsync(tokenSource);

        });
    }

    private async Task Perform(OperationType operationType, Func<Task> action)
    {
        _currentOperation = operationType;

        var stopwatch = new Stopwatch();

        stopwatch.Start();

        try
        {
            await action();
        }
        catch (Exception ex)
        {
            ModManagerOnOutput(ex.Message);
        }

        stopwatch.Stop();
        ModManagerOnOutput($"{operationType} finished! time: {stopwatch.ElapsedMilliseconds}");
        _currentOperation = OperationType.Idle;
    }
}