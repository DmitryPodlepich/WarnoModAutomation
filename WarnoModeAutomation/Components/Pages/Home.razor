@page "/"
@using System.Text
@using System.Diagnostics
@using WarnoModeAutomation.Logic;
@using BlazorBootstrap;
@using Microsoft.JSInterop
@using System.Collections.Concurrent;
@using WarnoModeAutomation.Logic.Providers.Interfaces
@using WarnoModeAutomation.Logic.Services.Interfaces
@inject IJSRuntime JS

<section class="d-flex flex-column h-100">

    <ConfirmDialog @ref="dialog" />

    <div>
        <Accordion AlwaysOpen="true">
            <AccordionItem Title="Status" IsActive="true">
                <Content>
                    <div class="d-flex flex-column">
                        <p class="h5">
                            <span class="badge badge-secondary">Mod name:</span>
                            <strong><small>@Storage.ModeSettings.ModName</small></strong>
                        </p>

                        <hr />

                        <p class="h5">
                            <span class="badge badge-secondary">Status:</span>
                            <strong><small>@DTO.StatusDTO.Status</small></strong>
                        </p>

                        <hr />

                    </div>
                </Content>
            </AccordionItem>
            <AccordionItem Title="Control" IsActive="true">
                <Content>
                    <div class="d-flex flex-row">
                        <Button Loading="@(_currentOperation == OperationType.Creation)" LoadingText="Creating..." Disabled="@(_currentOperation != OperationType.Idle)" Class="btn btn-primary" @onclick="CreateModAsync">
                            <i class="bi bi-plus-circle-dotted"></i> 
                            Create 
                        </Button>

                        <hr>

                        <Button Loading="@(_currentOperation == OperationType.Generation)" LoadingText="Generating..." Disabled="@(_currentOperation != OperationType.Idle)" Class="btn btn-primary ms-2" @onclick="GenerateModAsync">
                            <i class="bi bi-box-seam"></i>
                            Generate
                        </Button>

                        <hr>

                        <Button Loading="@(_currentOperation == OperationType.Updation)" LoadingText="Updating..." Disabled="@(_currentOperation != OperationType.Idle)" Class="btn btn-primary ms-2" @onclick="UpdateModAsync">
                            <i class="bi bi-download"></i>
                            Update 
                        </Button>

                        <hr>

                        <Button Loading="@(_currentOperation == OperationType.Modify)" LoadingText="Modifying..." Disabled="@(_currentOperation != OperationType.Idle)" Class="btn btn-primary ms-2" @onclick="ModifyAsync">
                            <i class="bi bi-cpu"></i>
                            Modify
                        </Button>

                        <hr>

                        <Button Loading="@(_currentOperation == OperationType.Deletion)" LoadingText="Deleting..." Disabled="@(_currentOperation != OperationType.Idle)" Class="btn btn-danger ms-2" @onclick="ShowDeleteModConfirmationAsync">
                            <i class="bi bi-trash-fill"></i>
                            Delete
                        </Button>

                        <Button Loading="@(_currentOperation == OperationType.Cancelation)" LoadingText="Cancelation..." Disabled="@(_currentOperation == OperationType.Cancelation || _currentOperation == OperationType.Idle)" Class="btn btn-danger ms-auto" @onclick="ShowCancelationModConfirmationAsync">
                            <i class="bi bi-trash-fill"></i>
                            Cancel
                        </Button>

                    </div>

                    <div class="mt-3" >
                        <Switch @bind-Value="_enableFullLog" Label="Enable full log" />

                        <p class="text-muted"> If enabled will show detailed logs in a log text area below. Otherwise will show only warnings and errors. </p>
                    </div>

                </Content>
            </AccordionItem>
        </Accordion>
    </div>

    <div class="flex-grow-1 d-flex flex-column p-3">

        <div class="d-flex flex-row justify-content-between align-items-center mb-2">
            <p class="m-0"><strong>Mod manager log: </strong></p>
            <Button @onclick="ModManagerOutputClear" Class="btn btn-warning"><i class="bi bi-eraser-fill"></i> Clear</Button>
        </div>

        <InputTextArea @ref=textAreaRef class="flex-grow-1" style="font-size: 14px;" @bind-Value="@ModManagerOutput"></InputTextArea>
    </div>

</section>

@code {

    private ConfirmDialog dialog = default!;
    private InputTextArea textAreaRef;

    private enum OperationType
    {
        Idle,
        Creation,
        Deletion,
        Generation,
        Updation,
        Modify,
        FillDatabase,
        Cancelation
    }

    private static CancellationTokenSource _cancellationToken;
    private bool _enableFullLog = false;
    private OperationType _currentOperation = OperationType.Idle;

    private string ModManagerOutput;
    private StringBuilderInterval _stringBuilderInterval;
    private ModManager _modManager;

    [Inject] ICMDProvider _cMDProvider { get; set; }
    [Inject] ISettingsManagerService _settingsManagerService { get; set; }
    [Inject] IWarnoModificationService _warnoModificationService { get; set; }

    protected override Task OnInitializedAsync()
    {
        _stringBuilderInterval = new StringBuilderInterval();
        _stringBuilderInterval.TextUpdated += TextUpdated;

        _modManager = new ModManager(_cMDProvider, _settingsManagerService, _warnoModificationService);
        _modManager.OnOutput += ModManagerOnOutput;

        return base.OnInitializedAsync();
    }

    public async Task TextUpdated(string data)
    {
        await App.Current.Dispatcher.DispatchAsync(async () =>
        {
            ModManagerOutput = data;
            StateHasChanged();
            await JS.InvokeVoidAsync("scrollHeight", textAreaRef?.Element);
        });
    }

    public void ModManagerOutputClear()
    {
        _stringBuilderInterval.Clear();
    }

    public void ModManagerOnOutput(string data)
    {
        _stringBuilderInterval.AddLine(data);
    }

    public async Task CreateModAsync()
    {
        await PerformAsync(OperationType.Creation, async (cancellationToken) =>
        {
            await _modManager.CreateModAsync();
            DTO.StatusDTO.GetStatus();
        });
    }

    private async Task ShowDeleteModConfirmationAsync()
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "Ok",
                YesButtonColor = ButtonColor.Danger,
                NoButtonText = "Cancel",
                NoButtonColor = ButtonColor.Secondary
            };

        var confirmation = await dialog.ShowAsync(
            title: "Are you sure you want to delete current mod?",
            message1: "This will delete the mod. Once deleted can not be rolled back.",
            message2: "Do you want to proceed?",
            options);

        if (confirmation)
            await DeleteModAsync();
    }

    private async Task ShowCancelationModConfirmationAsync()
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "Ok",
                YesButtonColor = ButtonColor.Danger,
                NoButtonText = "Cancel",
                NoButtonColor = ButtonColor.Secondary
            };

        var confirmation = await dialog.ShowAsync(
            title: "Are you sure you want to cancel current operation?",
            message1: "This will cancel current operation.",
            message2: "Do you want to proceed?",
            options);

        if (confirmation)
            await _cancellationToken.CancelAsync();
    }

    public async Task DeleteModAsync()
    {
        await PerformAsync(OperationType.Deletion, async (cancellationToken) =>
        {
            await _modManager.DeleteMod();
            DTO.StatusDTO.GetStatus();
            await Task.CompletedTask;
        });
    }

    public async Task GenerateModAsync()
    {
        await PerformAsync(OperationType.Generation, async (cancellationToken) =>
        {
            await _modManager.GenerateModAsync();
            DTO.StatusDTO.GetStatus();
        });
    }

    public async Task UpdateModAsync()
    {
        await PerformAsync(OperationType.Updation, async (cancellationToken) =>
        {
            await _modManager.UpdateModAsync();
            DTO.StatusDTO.GetStatus();
        });
    }

    public async Task ModifyAsync()
    {
        await PerformAsync(OperationType.Modify, async (cancellationToken) => await _modManager.Modify(_enableFullLog, cancellationToken.Token));
    }

    public async Task FillDatabaseAsync()
    {
        await PerformAsync(OperationType.FillDatabase,
            async (cancellationToken) => await _modManager.FillDatabaseAsync(cancellationToken));
    }

    private async Task PerformAsync(OperationType operationType, Func<CancellationTokenSource, Task> action)
    {
        if (_cancellationToken is not null)
        {
            await _cancellationToken.CancelAsync();
            _cancellationToken.Dispose();
        }

        _cancellationToken = new CancellationTokenSource(TimeSpan.FromSeconds(45));
        _currentOperation = operationType;

        var stopwatch = new Stopwatch();

        stopwatch.Start();

        try
        {
            await action(_cancellationToken);
        }
        catch (Exception ex)
        {
            ModManagerOnOutput(ex.Message);
        }

        stopwatch.Stop();
        ModManagerOnOutput($"{operationType} finished! time: {stopwatch.ElapsedMilliseconds}");
        _currentOperation = OperationType.Idle;
    }
}