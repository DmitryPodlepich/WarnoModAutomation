@page "/"
@using System.Text
@using WarnoModeAutomation.Logic;
@using BlazorBootstrap;

<section>

    <div>
        <Accordion AlwaysOpen="true">
            <AccordionItem Title="Status" IsActive="true">
                <Content>
                    <div class="d-flex flex-column">
                        <p class="h5">
                            <span class="badge badge-secondary">Mod name:</span>
                            <strong><small>@Storage.ModeSettings.ModeName</small></strong>
                        </p>

                        <hr />

                        <p class="h5">
                            <span class="badge badge-secondary">Status:</span>
                            <strong><small>@Storage.Status.Status</small></strong>
                        </p>

                        <hr />

                    </div>
                </Content>
            </AccordionItem>
            <AccordionItem Title="Control" IsActive="true">
                <Content>
                    <div class="d-flex flex-row">
                        <Button Loading="@(_currentOperation == OperationType.Creation)" LoadingText="Creating..." Disabled="@(_currentOperation != OperationType.Idle)" Class="btn btn-primary" @onclick="CreateMod">
                            <i class="bi bi-plus-circle-dotted"></i> 
                            Create 
                        </Button>

                        <hr>

                        <Button Loading="@(_currentOperation == OperationType.Generation)" LoadingText="Generating..." Disabled="@(_currentOperation != OperationType.Idle)" Class="btn btn-primary ms-2" @onclick="GenerateMod">
                            <i class="bi bi-box-seam"></i>
                            Generate
                        </Button>

                        <hr>

                        <Button Loading="@(_currentOperation == OperationType.Updation)" LoadingText="Updating..." Disabled="@(_currentOperation != OperationType.Idle)" Class="btn btn-primary ms-2" @onclick="UpdateMod">
                            <i class="bi bi-download"></i>
                            Update 
                        </Button>

                        <hr>

                        <Button Loading="@(_currentOperation == OperationType.Modify)" LoadingText="Modifying..." Disabled="@(_currentOperation != OperationType.Idle)" Class="btn btn-primary ms-2" @onclick="Modify">
                            <i class="bi bi-download"></i>
                            Run
                        </Button>

                        <hr>

                        <Button Loading="@(_currentOperation == OperationType.Deletion)" LoadingText="Deleting..." Disabled="@(_currentOperation != OperationType.Idle)" Class="btn btn-danger ms-2" @onclick="DeleteMod">
                            <i class="bi bi-trash-fill"></i>
                            Delete
                        </Button>

                    </div>
                </Content>
            </AccordionItem>
        </Accordion>
    </div>

    <div class="d-flex flex-column p-3">

        <div class="d-flex flex-row justify-content-between align-items-center mb-2">
            <p class="m-0"><strong>Mod manager log: </strong></p>
            <Button @onclick="ModManagerOutputClear" Class="btn btn-warning"><i class="bi bi-eraser-fill"></i> Clear</Button>
        </div>

        <InputTextArea style="min-height: 35vh; font-size: 14px;" @bind-Value="@ModManagerOutput"></InputTextArea>
    </div>

</section>


@code {
    private enum OperationType
    {
        Idle,
        Creation,
        Deletion,
        Generation,
        Updation,
        Modify
    }

    private OperationType _currentOperation = OperationType.Idle;

    private string ModManagerOutput { get => _stringBuilder.ToString(); set => _stringBuilder = new StringBuilder(value); }
    private StringBuilder _stringBuilder;

    protected override Task OnInitializedAsync()
    {
        _stringBuilder = new StringBuilder();

        ModManager.OnOutput += ModManagerOnOutput;

        return base.OnInitializedAsync();
    }

    public void ModManagerOutputClear()
    {
        _stringBuilder.Clear();
    }

    public void ModManagerOnOutput(string data)
    {
        _stringBuilder.AppendLine(data);
    }

    public async Task CreateMod()
    {
        _currentOperation = OperationType.Creation;

        await ModManager.CreateModAsync();
        Storage.Status.GetStatus();

        _currentOperation = OperationType.Idle;
    }

    public void DeleteMod()
    {
        _currentOperation = OperationType.Deletion;
        ModManager.DeleteMod();
        Storage.Status.GetStatus();
        _currentOperation = OperationType.Idle;
    }

    public async Task GenerateMod()
    {
        _currentOperation = OperationType.Generation;
        await ModManager.GenerateModAsync();
        Storage.Status.GetStatus();
        _currentOperation = OperationType.Idle;
    }

    public async Task UpdateMod()
    {
        _currentOperation = OperationType.Idle;
        await Task.CompletedTask;
    }

    public void Modify()
    {
        _currentOperation = OperationType.Modify;
        ModManager.Modify();
        _currentOperation = OperationType.Idle;
    }
}